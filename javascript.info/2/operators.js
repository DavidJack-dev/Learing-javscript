// 기본 연산자와 수학
// 용어 : '단항', '이항', '피연산자'
// - 피연산자(operand)는 연산자가 연산을 수행하는 대상입니다. `5 * 2`에는 왼쪽 피연산자 5와 오른쪽 피연산자 2, 총 두 개의 피연산자가 있습니다.
//  - '피연산자'는 '인수(agrument)'라는 용어라고 불립니다.

// - 피연산자를 하나만 받는 연산자는 단항(unary) 연산자라고 부릅니다. 피연산자의 부호를 뒤집는 단항 마이너스 연산자 ' - '는 단항 연산자의 대표적인 예이다.


let x = 1;
x = x;
alert(x); // -1, 단항 마이너스 연산자는 부호를 뒤집는다.

//두 개의 피연산자를 받는 연산자는 이항(binary) 연산자라고 부른다.

let x = 1, y = 3;
alert ( y - 3); // 2, 이항 마이너스 연산자는 뺼셈을 해준다.

// 수학
//     덧셈 연산자 +,
//     뺄셈 연산자 -,
//     곱셈 연산자 *,
//     나눗셈 연산자 /,
//     나머지 연산자 %,
//     거듭제곱 연산자 **


// 나머지 연산자 %

alert( 5 % 2 ); // 5f를 2로 나눈 후의 나머지인 1을 출력
alert( 8 % 3 ); // 8을 3으로 나눈 후의 나머지 2를 출력


//거듭제곱 연산자 ** : 거듭제곱 연산자(exponentiation operator)를 사용한 a ** b를 평가하면 a를 b번 곱한 값이 반환

alert( 2 ** 2 ); //4
alert( 2 ** 3 ); //8 2 * 2 * 2
alert( 2 ** 4 ); //16 2 * 2 * 2 * 2

alert( 4 ** (1/2) ); // 2(1/2 거듭제곱은 제곱근)
alert( 8 ** (1/3) ); // 2(1/3 거듭제곱은 세제곱근)


//이항 연산자 '+'와 문자열 연결

let a = "my " +"name";
alert(a);

alert ( '1' + 2); // "12"
alert ( 2 + '1' ); // "21"

alert( 6 - '2' ); // 4, '2'를 숫자로 바꾼 후 연산이 진행 됩니다.
alert( '6' - '2' ); // 3, 두 피연산자가 숫자로 바뀐 후 연산이 진행됩니다.

// 단항 연산자 + 와 숫자형으로의 변환 : 덧셈 연산자는 '+' 는 이항 연산자뿐만 아니라 단항 연산자로도 사용할 수 있습니다.
  // 숫자에 단항 덧셈 연산자를 붙이면 이 연산자는 아무런 동작도 하지 않습니다. 그러나 피연산자가 숫자가 아닌 경우엔 숫자형으로의 변환이 일어난다.

// 숫자에는 아물너 영향을 미치지 않다.
let x = 1;
alert( +x ); // 1

let y = -2;
alert ( +y ); // -2

// 숫자형이 아닌 피연산자가 숫자형으로 변화합니다ㅣ
alert( +true ); // 1
alert( +"" );

//개발을 하다 보면 문자열을 숫자로 변환해야 하는 경우가 자주 생깁니다. HTML 폼(form) 필드에서 값을 가져왔는데 그 값이 문자형일 때 같이 말이죠. 실제로 폼에서 가지고 온 값은 대개 문자열 형태입니다.
let apples = "2";
let oranges = "3";

alert( apples + oranges ); // 23, 이항 덧셈 연산자는 문자열을 연결합니다.

let apples = "2";
let oranges = "3";

// 이항 덧셈 연산자가 적용되기 전에, 두 피연산자는 숫자형으로 변화합니다.
alert( +apples + +oranges ); // 5

// `Number(...)`를 사용해서 같은 동작을 하는 코드를 작성할 수 있지만, 더 기네요.
// alert( Number(apples) + Number(oranges) ); // 5

// 할당 연산자 : 무언가를 할당할 때 쓰이는 '=' 도 연산자이다. 이 연산자는 할당(assignment) 연산자라고 불린다.

let x = 2 * 2 + 1;
alert( x );

// 값을 반환하는 할당 연산자 : =는 연산자 이기 때문에 흥미로운 함축성을 내포 하고 있습니다.
 // 자바 스크립트에서 댑분의 연산자들은 값을 반환합니다. + 와 - 뿐만 아니라 = 역시 값을 반환
   // x = value을 호출하면 value가 x에 쓰여지고, 이에 더하여 value가 반환됩니다.
let a = 1;
let b = 2;

let c = 3 - (a = b + 1);

alert ( a ); // 3
alert ( c ); // 0

// 할당 연산자 체이닝 : 할당 연산자를 여러 개 연결함.
let a, b, c;

a = b = c = 2 + 2;

alert ( a );
alert ( b );
alert ( c );

//복할 할당 연산자 : 프로그램 짜다 보면, 변수에 연산자를 적용하고 그 결과를 같은 변수에 저장해야 하는 경우가 종종 생깁니다.

let n = 2;
n = n + 5;
n = n * 2;

// 이 때 += 와 *= 연산자를 사용하면 짧은 문법으로 동일한 연산을 수행할 수 있다.

let n = 2;
n += 5; // n은 7이 됩니다. ( n = n + 5와 동일)
n *= 2; // n은 14이 됩니다. ( n = n * 2와 동일)

alert( n ); // 14

// 이런 '복합 할당' 연산자는 산술 연산자와 비트 연산자에도 적용할 수 있습니다. /=, -= 등의 연산자를 만들 수 있죠.

let n = 2;

n *= 3 + 5;

alert ( n ); // 16 ( *=의 우측이 먼저 평가되므로, 위 식은 n *= 8과 동일















